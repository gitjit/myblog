<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FullStack on Jithesh</title>
    <link>https://gitjit.github.io/myblog/categories/fullstack/</link>
    <description>Recent content in FullStack on Jithesh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2024 12:54:03 -0700</lastBuildDate><atom:link href="https://gitjit.github.io/myblog/categories/fullstack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redux Essentials</title>
      <link>https://gitjit.github.io/myblog/posts/react/redux-essentials/</link>
      <pubDate>Wed, 04 Sep 2024 12:54:03 -0700</pubDate>
      
      <guid>https://gitjit.github.io/myblog/posts/react/redux-essentials/</guid>
      
      <description>&lt;h2 id=&#34;why-redux-&#34;&gt;Why Redux ?&lt;/h2&gt;
&lt;p&gt;As React applications grow, managing state across multiple components can become complex and difficult to maintain. This is where Redux comes in, providing a predictable state management solution that helps developers maintain consistency across their applications. In this post, we’ll explore Redux, specifically using Redux Toolkit, to make our state management simpler and more efficient.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;https://gitjit.github.io/myblog/myblog/posts/react/redux-essentials/image.png&#34;&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>React Hooks</title>
      <link>https://gitjit.github.io/myblog/posts/react/hooks/</link>
      <pubDate>Tue, 03 Sep 2024 12:54:03 -0700</pubDate>
      
      <guid>https://gitjit.github.io/myblog/posts/react/hooks/</guid>
      
      <description>&lt;h2 id=&#34;react-hooks&#34;&gt;React Hooks&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitjit.github.io/myblog/myblog/posts/react/hooks/2024-09-04-15-10-36.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As React applications grow, managing state across multiple components can become complex and difficult to maintain. This is where Redux comes in, providing a predictable state management solution that helps developers maintain consistency across their applications. In this post, we’ll explore Redux, specifically using Redux Toolkit, to make our state management simpler and more efficient.&lt;/p&gt;
&lt;p&gt;In React, Hooks are special functions that let you use React features like state and lifecycle methods in functional components. Before React Hooks were introduced, only class components could manage state and lifecycle events. Hooks enable developers to use functional components with all the capabilities that class components had, such as managing local component state, side effects, context, and more.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
